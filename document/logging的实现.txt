多スレッドbackend処理で30万件書き込みテスト結果によってあまり時間がかからないことが分かった
logging利用ログ出力を採用する


pythonでバッチスクリプトを書くときの雛形
https://qiita.com/fetaro/items/77cb5571c472eac85031


# logging资料
https: // juejin.cn/post/6844903692915703815

# 解决log中不能正常显示中文或者日文的方法
handler = logging.FileHandler(filename="test.log", encoding="utf-8")
rHandler = RotatingFileHandler(os.path.join(
    app_home, log_path, logging_file_name), encoding="utf-8", maxBytes=maxBytes, backupCount=backupCount)


# 异常信息也会添加到日志消息里
# 抛出一个异常可以是Exception，或者ValueError
# 直接在try里面抛出一个异常raise，在except里面处理刚才抛出的异常
2 try:
3 raise IOError, 'this is a winter testing IOError'
4 except IOError:
5     logger.exception('record this error')
6     logger.warning(''.center(50, '-'))


# 親ディレクトリをアプリケーションのホーム(${app_home})に設定
app_home = str(Path(__file__).parents[1])
# logging设定
logger = logging.getLogger(__name__)
logger.setLevel(level=logging.WARNING)
# 定义一个RotatingFileHandler，最多备份3个日志文件，每个日志文件最大1K
rHandler = RotatingFileHandler(os.path.join(
    app_home, 'log', 'error_log.log'), maxBytes=1024*1024, backupCount=3)
rHandler.setLevel(logging.WARNING)
formatter = logging.Formatter(
    '%(asctime)s - filename:%(filename)s - funcName:%(funcName)s - message:%(message)s - process:%(process)s')
rHandler.setFormatter(formatter)
logger.addHandler(rHandler)


========================================================================================================
flake8
使用vscode 自动合规flake8
https: // qiita.com/psychoroid/items/2c2acc06c900d2c0c8cb

pip install flake8
pip install flake8 - U
pip install autopep8

80文字以上でエラーが出るのは流石に避けたいのでこのエラーチェックを外します。150文字に伸ばす。
"python.linting.flake8Args": [
    "--max-line-length=150"
]


pycodestyleエラーコードの一覧
https: // arakan-pgm-ai.hatenablog.com/entry/2018/11/12/090000


========================================================================================================
VsCode不能跳转到定义
搜索python: language server，设置成jedi ，重启，成功了

Python3获取当前时间（精确到秒）:
print("当前时间： ", time.strftime('%Y.%m.%d %H:%M:%S ', time.localtime(time.time())))

import sys
from pathlib import Path
# 获取my_batch的绝对路径，然后加入到sys.path系统路径中去，这样系统运行的时候就可以找到conf这个自定义库了
sys.path.append(str(Path(__file__).parents[1]))



简单测试结果

2000件
这个是带日志输出
程序执行时间(微秒)：323737

这个是不带日志输出
程序执行时间(微秒)：120705


3000件
这个是带日志输出
程序执行时间(微秒)：463349

这个是不带日志输出
程序执行时间(微秒)：177807


3000件的话error日志大概是900KB
如果30万件 大概是90MB
